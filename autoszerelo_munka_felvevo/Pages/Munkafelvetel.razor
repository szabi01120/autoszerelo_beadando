@page "/munkafelvetel"
@using autoszerelo_munka_felvevo.Model
@using System.ComponentModel.DataAnnotations
@using System.Linq
@using System.Collections.Generic
@using System.Net.Http.Json;
@inject HttpClient HttpClient

<PageTitle>Munkafelvétel</PageTitle>

<h3>Munkafelvétel</h3>

@if (!IsSubmitted)
{
    <form>
        <div class="form-group">
            <label>Ügyfél neve:</label>
            <input class="form-control" @bind="@UjMunka.UgyfelNeve" />
            <ValidationMessage For="@(() => UjMunka.UgyfelNeve)" />
        </div>
        <div class="form-group">
            <label>Autó típusa és rendszáma:</label>
            <input class="form-control" @bind="@UjMunka.AutoTipusRendszam" />
            <ValidationMessage For="@(() => UjMunka.AutoTipusRendszam)" />
        </div>
        <div class="form-group">
            <label>Gyártási év:</label>
            <input class="form-control" type="number" @bind="@UjMunka.GyartasiEv" />
            <ValidationMessage For="@(() => UjMunka.GyartasiEv)" />
        </div>
        <div class="form-group">
            <label>Munka kategória:</label>
            <select class="form-control" @bind="@UjMunka.MunkaKategoria">
                <option value="">Válasszon</option>
                <option value="Karosszéria">Karosszéria</option>
                <option value="motor">Motor</option>
                <option value="futómű">Futómű</option>
                <option value="fékberendezés">Fékberendezés</option>
            </select>
            <ValidationMessage For="@(() => UjMunka.MunkaKategoria)" />
        </div>
        <div class="form-group">
            <label>Az autó hibájának leírása:</label>
            <input class="form-control" @bind="@UjMunka.HibaLeiras" />
            <ValidationMessage For="@(() => UjMunka.HibaLeiras)" />
        </div>
        <div class="form-group">
            <label>A hiba súlyossága (1-10):</label>
            <input class="form-control" type="number" min="1" max="10" @bind="@UjMunka.HibaSulyossaga" />
            <ValidationMessage For="@(() => UjMunka.HibaSulyossaga)" />
        </div>
        <button class="btn btn-primary" @onclick="SubmitForm">Munka felvétele</button>
    </form>
}
else
{
    <p>Munka sikeresen felvéve.</p>
}

<h3>Meglévő munkák</h3>
@if (Munkak != null)
{
    <table class="table table-light">
        <thead>
            <tr>
                <th>Ügyfél neve</th>
                <th>Autó típusa és rendszáma</th>
                <th>Gyártási év</th>
                <th>Munka kategória</th>
                <th>Az autó hibájának leírása</th>
                <th>A hiba súlyossága</th>
                <th>Munkaóra esztimáció</th>
                <th>Műveletek</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var munka in Munkak)
            {
                <tr>
                    <td>@munka.UgyfelNeve</td>
                    <td>@munka.AutoTipusRendszam</td>
                    <td>@munka.GyartasiEv</td>
                    <td>@munka.MunkaKategoria</td>
                    <td>@munka.HibaLeiras</td>
                    <td>@munka.HibaSulyossaga</td>
                    <td>@EstimateWorkHours(munka)</td>
                    <td>
                        <button class="btn btn-secondary" @onclick="() => ViewMunka(munka)">Megtekintés</button>
                        <button class="btn btn-secondary" @onclick="() => ModifyMunka(munka)">Módosítás</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Loading...</p>
}

@code {
    private Munka UjMunka { get; set; } = new Munka();
    private bool IsSubmitted { get; set; } = false;
    private List<Munka> Munkak { get; set; }
    private string SortColumn { get; set; } // Az aktuálisan kiválasztott rendezés oszlopa
    private bool SortAscending { get; set; } = true; // Az aktuális rendezés iránya

    private void SortByColumn(string column)
    {
        if (SortColumn == column)
        {
            SortAscending = !SortAscending; // Fordított irányba változtatjuk a rendezés irányát
        }
        else
        {
            SortColumn = column;
            SortAscending = true; // Alapértelmezetten növekvő sorrendbe rendezzük
        }

        // Adatok rendezése
        switch (SortColumn)
        {
            case "UgyfelNeve":
                if (SortAscending)
                {
                    Munkak = Munkak.OrderBy(munka => munka.UgyfelNeve).ToList();
                }
                else
                {
                    Munkak = Munkak.OrderByDescending(munka => munka.UgyfelNeve).ToList();
                }
                break;
            case "AutoTipusRendszam":
                if (SortAscending)
                {
                    Munkak = Munkak.OrderBy(munka => munka.AutoTipusRendszam).ToList();
                }
                else
                {
                    Munkak = Munkak.OrderByDescending(munka => munka.AutoTipusRendszam).ToList();
                }
                break;
            // További oszlopok rendezése
            // case "ColumnName":
            //     if (SortAscending)
            //     {
            //         Munkak = Munkak.OrderBy(munka => munka.ColumnName).ToList();
            //     }
            //     else
            //     {
            //         Munkak = Munkak.OrderByDescending(munka => munka.ColumnName).ToList();
            //     }
            //     break;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        Munkak = await HttpClient.GetFromJsonAsync<List<Munka>>("http://localhost:5248/Database");
    }



    private async Task SubmitForm()
    {
        var validationContext = new ValidationContext(UjMunka);
        var validationResults = new List<ValidationResult>();
        if (Validator.TryValidateObject(UjMunka, validationContext, validationResults, true))
        {
            // Validáció sikeres, elküldhetjük az adatokat a szervertől
            await HttpClient.PostAsJsonAsync("http://localhost:5248/Database", UjMunka);

            IsSubmitted = true;

            await LoadData(); // Frissítsük az adatokat
        }
    }

    private string EstimateWorkHours(Munka munka)
    {
        // Az API számolja ki a munkaóra becslést
        // Példa:
        // return await HttpClient.GetJsonAsync<string>($"api/munkak/{munka.Id}/workhours");
        return "4"; // Itt a becslés helyett egyszerűen egy konstans értéket adunk vissza
    }

    private void ViewMunka(Munka munka)
    {
        // Munka megtekintése logika
        // Pl. megnyit egy modális ablakot vagy navigál egy új oldalra
        // Itt csak kiírjuk a konzolra a munka adatait
        Console.WriteLine($"Megtekintett munka: {munka.UgyfelNeve}, {munka.AutoTipusRendszam}, stb.");
    }

    private void ModifyMunka(Munka munka)
    {
        // Munka módosítása logika
        // Pl. megnyit egy űrlapot vagy navigál egy új oldalra a módosításhoz
        // Itt csak kiírjuk a konzolra, hogy módosítás történt
        Console.WriteLine($"Módosított munka: {munka.UgyfelNeve}, {munka.AutoTipusRendszam}, stb.");
    }
}
